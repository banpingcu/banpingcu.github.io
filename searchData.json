[{"title":"早晨","url":"/2022/11/24/早晨/","content":"海边美丽的早晨！！！！！\n![清晨的阳光](https://images.pexels.com/photos/1631678/pexels-photo-1631678.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500)","tags":["摄影"],"categories":["摄影"]},{"title":"2019-7-16未命名文件","url":"/2022/11/24/密码学基础/","content":"\n\n敌手攻击方法\n被动攻击方法（窃听）：\n主动攻击方法：修改信息\n\n\n对抗主动攻击的技术 认证技术\n添加认证码 检验验证码于信息是否匹配\n对抗抵赖的技术 互不信任双方的认证问题\n密码学的第三个问题 承诺的不可否认性问题。\n添加认证码：让所有人都可以识别承诺的真伪。\n\n密码学的基本目标就是解决信息安全的三个基本安全需求即：\n（1）信息的机密性保证（加密算法）\n（2）信息的真实性认证（由认证算法和配套的协议完成）\n（3）承诺的不可否认性保证（由数字签名算法、配套的协议和仲裁机构完成）\n\n加密算法的一些基本概念\n![enter description here](./images/1563258824913.png)\n对攻击能力的基本假设\n假设敌手知道除密钥之外的所有知识。\n（1）所使用的密码算法\n加密算法、脱密算法、明文空间、密文空间、密钥空间。\n（2）知道铭文的概率分布规律\n（3）知道密钥的概率分布规律\n（4）知道所有可能的破解方法\n\n三类主要的攻击方法\n分类方法：按敌手可利用知识的类别分类。\n（1）唯密文攻击\n（2）一至铭文攻击\n（3）选择明文攻击\n穷举攻击，就式逐一利用每个可能的密钥对密文进行脱密测试。\n目前，可能密钥的总数少于2的六十四次方的密码不可以对抗穷举法\n2的128次方可以对抗穷举法。\n\n 穷举攻击时最笨往往最有效的方法\n 密码算法设计的最理想境界就是让所有的破解方法都比穷举攻击更无效。安全的面貌算法应能狗对抗所有可能的攻击方法。\n \n \n 分支一：密码编码学\n 分支二：密码分析学  破解密码\n 分支三：密钥管理学\n \n 密码算法最基本的三个编码技术\n \n 1.信息加密的一般流程\n 消息处理为数字，数子经过加密密钥加密为密文然后脱密为明文。还原为消息，\n \n 三种基本编码技术\n 代替密码：利用预先设计的代替规则，对铭文逐字符或逐字符组进行代替的密码\n 移位密码：对各字符或字符组进行位置移动的密码。\n 加减密码：将铭文逐字符或逐字符组于乱数相加或相减的密码。\n \n \n 1单表代替密码\n 利用预先设计的固定代替规则，对铭文逐字符或逐字符组进行代替的密码\n 优点：明文字符的形态一般面目全非\n 缺点：明文的位置不变\n 跟随关系不变\n 2多表代替密码\n \n \n \n完全保密的充分条件\n\n熵的概念\n信息时什么？\n（1）当未知的信息变成已知的之后获取的信息\n（2）当未知的还没编程已知之前包含的未知信息\n一个随机事件包含的信息\n熵的定义\n设一个实验\n![enter description here](./images/1563326906488.png)\n\n一个实验的熵就是该实验的每个可能结果的期望\n\n熵大于等于0小于logbn\n联合熵 \n考察未密文攻击方法平均所获得的信息量\n\n熵的主要理论\n![enter description here](./images/1563415166342.png)\n联合熵条件熵 \nx与y独立 H(x,y)=h(x)h(y)\nShannon保密理论\n密码体制的数学模型\n一个密码体制由明文空间、密文空间、密钥空间、加密算法、脱密算法5部分组成\n被加密的明文是明文空间上某个一直概率分布。\n理论上的保密性，\n唯密文攻击方法平均能获得的信息量。\n明文和密文从不互相提供消息\n由密文求不出明文的条件是什么。\nx","tags":["新建,模板,小书匠"]},{"title":"wangEditor的配置和使用","url":"/2022/11/24/wangEditor的配置和使用/","content":"\n\n\n# wangEditor的配置和使用\n\nwangEditor是一款轻量级的富文本编辑器，优点时页面美观并且操作十分方便。通过富文本编辑器可以更加快速的编辑文档并将其转变为html语言，我将此编辑器用与后台编写\n具体的经历部分，让使用者可以不需要懂得html语言就可以更好的编辑自己的简历内容。\nwangEditor的配置方法\n首先需要在其官网中下载该编辑器的文件，将其引入至后台的视图部分，需要引入如下代码。\n\n``` html\n<script type=\"text/javascript\" src=\"/wangEditor.min.js\"></script>\n    <script type=\"text/javascript\">\n        var E = window.wangEditor\n        var editor = new E('#editor')\n        // 或者 var editor = new E( document.getElementById('editor') )\n        editor.create()\n</script>\n```\n此时，编辑器就引入成功了。可以在编辑器里面编辑内容，如图所示。\n\n下一步我需要获取编辑器编辑内容后所生成的html代码。可以有两种方法，一种是使用textarea的方法，还有一种是jaon的方法。我选择使用的是textarea的方法。\n首先我们需要textarea标签来创建一个文本框并命名问text。但是事实上我们并不需要真正的显示他的内容，因此为了美观，我把该文本框的显示方式设置为不显示，即在页面中并不会看见这个文本框。\n然后，加入代码$text.val(editor.txt.html())\n该代码的含义为，获取编辑器生成的html代码并将其写入textareal中。之后我们可以很方便的使用post方法将其传送到控制器，通过控制器将其内容写数据库，用于前台的调用。\n","tags":["网页"],"categories":["计算机"]},{"title":"Nginx研究","url":"/2022/11/24/Nginx分析/","content":"\n\n**1.事件驱动模型**\n\t\tApache为每个请求对应的一个进程，Apache采用Select模型实现的是基于事件驱动的多路复用模型。Apache采用的是多线程进行打开大数目的socket描述符，这使得CPU的处理高并发I/O时效率极其低下。由于该系统针对高并发的I/O操作时，采用阻塞式I/O将建立大量的线程，系统效率及稳定性都将收到很大的影响。甚至由于采用该模式，尽管加大服务器配置，Apache面对高并发的访问量页不会有太大的改善。\nNginx采用事件驱动模型。进程通过事件监听共享套接字。通过事件循环处理多个请求，减少了CPU在进行进程切换了时浪费大量资源。\n**2.异步IO处理**\n\t\tNginx选择了高效的epoll和kqueue作为网络I/O模型，而Apache采用的是传统的select模型。Epoll和kqueue优势在于支持使用单线程打开大数目的socket描述符。Apache阻塞模型，Nginx异步模型，而在处理高并发I/O时，Nginx服务的内存消耗更低。因为阻塞 I/O 模型不存在异步通知，所以该模型的吞吐率较低；多路复用模型(select/poll模型)可在一个进程中管理一个socket集合，但该模型实质上也属于阻塞模型，当集合中没有socket发生网络事件时进程就阻塞，内核也是通过轮询 socket集合得到网络事件，并不是操作系统通知给用户程序，所以，当socket数量增大时，系统性能会线性下降； epoll模型通过callback方法实现系统异步通知，socket 集合中活跃的 socket 通过调用 callback 函数通知客户程序，省去了轮询时间，提高了网络性能。\n**3.主从进模式**\n\t\tNginx基于主从进程模型，Nginx启动时首先启动一个master模型，用于管理工作进程，主进程根据CPU核心数启动相应数目的工作进程，用于处理用户请求，工作进程之间共享内存，源子操作西永等进程间通信机制实现请求的负载均衡。\n因此结合实际测试以及深度研究，可以得出结论，在高并发的情况下，Nginx更加适合作为作为服务器软件。而在低并发的网站中仍是以Apache作为服务器软件更加合理.","tags":["服务器","Nginx"],"categories":["计算机"]},{"title":"NMP的使用介绍","url":"/2019/06/02/NPM的使用/","content":"NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：\n\n 1. 允许用户从NPM服务器下载别人编写的第三方包到本地使用。\n 2. 允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。\n 3. 允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。\n\n由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 \"npm -v\" 来测试是否成功安装。命令如下，出现版本提示表示安装成功:\n\n``` shell\n$ npm -v\n2.3.0\n```\n如果你安装的是旧版本的 npm，可以很容易得通过 npm 命令来升级，命令如下：\n``` shell\n$ sudo npm install npm -g\n/usr/local/bin/npm -> /usr/local/lib/node_modules/npm/bin/npm-cli.js\nnpm@2.14.2 /usr/local/lib/node_modules/npm\n```\n如果是 Window 系统使用以下命令即可：\n\n``` coffeescript\nnpm install npm -g\n```\n使用淘宝镜像的命令：\n\n``` ebnf\ncnpm install npm -g\n```\n\n使用 npm 命令安装模块\nnpm 安装 Node.js 模块语法格式如下：\n\n``` sql\n$ npm install <Module Name>\n```\n\n以下实例，我们使用 npm 命令安装常用的 Node.js web框架模块 express:\n\n``` shell\n$ npm install express\n```\n\n安装好之后，express 包就放在了工程目录下的 node_modules 目录中，因此在代码中只需要通过 require('express') 的方式就好，无需指定第三方包路径。\n","tags":["Node.js"],"categories":["计算机"]},{"title":"黄昏","url":"/2019/02/22/黄昏/","content":"空中看见日落的场景\n![enter description here](https://images.pexels.com/photos/2253814/pexels-photo-2253814.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940)\n\n","tags":["摄影","阳光"],"categories":["摄影"]},{"title":"闰年","url":"/2019/02/02/闰年/","content":"**输入年、月、日，计算该天是本年的第几天。**\n\n``` javascript\n#include <stdio.h>\n//闰年的条件能被4整除但不能被100整除的年份为普通闰年。；\n//世纪闰年:能被400整除的为世纪闰年。\nint runnian(int a){\n    if (a%4==0&&a%100!=0)\n    return 0;\n    if (a%400==0)\n    return 0;\n    else return 1;\n}\nint main(){\n    int a,b,c,sum=0;\n    while(scanf(\"%d %d %d\",&a,&b,&c)!=EOF){\n    if(runnian(a))\n    {\n        switch(b-1){\n            case 11: sum+=30;\n            case 10: sum+=31;\n            case 9: sum+=30;\n            case 8: sum+=31;\n            case 7: sum+=31;\n            case 6: sum+=30;\n            case 5: sum+=31;\n            case 4: sum+=30;\n            case 3: sum+=31;\n            case 2: sum+=28;\n            case 1: sum+=31;            \n        }           \n    }\n    else{\n         switch(b-1){\n             case 11: sum+=30;\n             case 10: sum+=31;\n             case 9: sum+=30;\n             case 8: sum+=31;\n             case 7: sum+=31;\n             case 6: sum+=30;\n             case 5: sum+=31;\n             case 4: sum+=30;\n             case 3: sum+=31;\n             case 2: sum+=29;\n             case 1: sum+=31;            \n        }           \n    }\n    sum = sum +c;\n    printf(\"%d\",sum);\n    }  \n}\n```\n也可以将每月的日期直接写在数组内然后计算，这样写是为了练习一下switch的用法。\n\nbreak和continue的区别:\n\n``` javascript\n#include <stdio.h>\nint main(){\n    int k=4,n=0;\n    while(k){\n        k--;\n        switch(k){\n           default :break;\n            case 1:n++;\n            case 2:++n;break;\n            case 3:if(n>=0) continue;     \n        }\n        ++n;      \n    }\n    printf(\"%d\\n\",n);\n    return 0;\n}\n```\n答案是6.\nk=4时：不变，不执行循环中continue后面的语句\nk=3时：k=2\nk=2时：k=5\nk=1时：k=6","tags":["C语言"],"categories":["计算机"]},{"title":"文件的使用","url":"/2018/12/05/文件的使用/","content":"**C语言文件的操作**\n\n``` javascript\n\nint main()\n{\n\n\n   FILE *fp = NULL;\n\n   fp = fopen(\"test.txt\", \"w+\");//w+是指既可以写也可以读\n   fprintf(fp, \"This is testing for fprintf...\\n\");//使用fprintf的输入方法\n   fputs(\"This is testing for fputs...\\n\", fp);//使用futs的输入方法\n   fclose(fp);\n\n   char buff[255];\n\n   fp = fopen(\"test.txt\", \"r\");//只读方法打开\n   fscanf(fp, \"%s\", buff);//fscanf直到空格就截止，并存入到buff里面（并不可以直接输出）\n   printf(\"1: %s\\n\", buff );\n\n   fgets(buff, 255, (FILE*)fp);\n   printf(\"2: %s\\n\", buff );//接着上一步的位置读取文件，到换行符 '\\n' 或文件的末尾 EOF介绍\n\n   fgets(buff, 255, (FILE*)fp);\n   printf(\"3: %s\\n\", buff );\n   fclose(fp);\n\n}\n\n```\n\n结果图\n![enter description here](https://wx2.sinaimg.cn/mw690/006cW3dhly1g0y25j25plj30ag0380sl.jpg)\n\nr 打开只读文件，该文件必须存在。\nr+ 打开可读写的文件，该文件必须存在。\nrb+ 读写打开一个二进制文件，只允许读写数据。\nrt+ 读写打开一个文本文件，允许读和写。\nw 打开只写文件，若文件存在则文件长度清为0，即该文件内容会消失。若文件不存在则建立该文件。\nw+ 打开可读写文件，若文件存在则文件长度清为零，即该文件内容会消失。若文件不存在则建立该文件。\na 以附加的方式打开只写文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被加到文件尾，即文件原先的内容会被保留。\na+ 以附加方式打开可读写的文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被加到文件尾后，即文件原先的内容会被保留。\nwb 只写打开或新建一个二进制文件；只允许写数据。\nwb+ 读写打开或建立一个二进制文件，允许读和写。\nwt+ 读写打开或着建立一个文本文件；允许读写。\nat+ 读写打开一个文本文件，允许读或在文本末追加数据。\nab+ 读写打开一个二进制文件，允许读或在文件末追加数据。","tags":["C语言"],"categories":["计算机"]},{"title":"平方数","url":"/2018/12/03/平方数/","content":"\n\n***题目：打印所有不超过n（n<256）的，其平方具有对称性质的数。如11*11=121。***\n\n``` javascript\n#include <stdio.h>\nint main(){\n    int i,n,m;\n    for(i=0;i<256;i++) {\n      n = i * i;  //i平方\n      m = 0;\n\t   //将i*i的积取反，如10*10=100，将100取反是001\n       while(n) {\n        m = m *10 + n%10; \n        n = n/10;\n       }\n       if(m == i*i)  \n        printf(\"%d\\n\",i);\n    }\n  return 0;\n}\n\n```\n解题思路：正反一样就是对称数。","tags":["C语言"],"categories":["计算机"]},{"title":"C语言字符串","url":"/2018/12/02/C语言字符串/","content":"\n题目描述\n给出一个长度不超过1000的字符串，判断它是不是回文(顺读，逆读均相同)的。\n\n``` javascript\n\n#include <stdio.h>\n#include <string.h>//字符串函数库\nint main(){\n    char a[1000];\n\tint flag=0,i,j;\n\twhile(scanf(\"%s\",a)!=EOF)//CTRL+Z\n\t{\n\t    for(i=0,j=strlen(a)-1;i<j;i++,j--)\n\t\t{\n\t\t   if(a[i]!=a[j])\n\t\t   {\n\t\t      flag=1;\n\t\t\t  printf(\"No!\");\n              break;//跳出for循环\n\t\t   }\n\t\t}\n        if(flag==0)\n\t    {\n     \tprintf(\"Yes!\");\n\t    }  \n\t}\n\t return 0;\n}\n\n```","tags":["C语言"],"categories":["计算机"]},{"title":"DRAM","url":"/2018/11/02/DRAM/","content":"**==什么是DRAM？什么是E2PROM？计算机的主存采用哪种存储器==**？\n\n        DRAM 的英文全称是\"Dynamic RAM\"，翻译成中文就是\"动态随机存储器\"。。只能将数据保持很短的时间。为了保持数据，DRAM 必须隔一段时间刷（refresh）一次。如果存储单元没有被刷新，数据就会丢失。DRAM用于通常的数据存取。我们常说内存有多大，主要是指DRAM的容量\n        E2PROM编程原理和EPROM相同，但可用电擦除，重复该写的次数有限制，大约10万次。其读写操作可按每个位或者每个字节进行。\n\n      \n           \n","tags":["计算机组成原理"],"categories":["计算机"]},{"title":"PPP协议","url":"/2018/11/02/PPP协议/","content":"**==PPP协议（只支持全双工链路）==**\n需要满足的要求\n1．\t简单，比IP层简单。无需纠错、序号、流量控制。\n2．\t封装成帧：帧定界符\n3．\t透明传输 异步线路用字节填充，同步线路用比特填充。\n4．\t多种网络层协议：封装IP数据包可以采用多种协议\n5．\t多种类型链路：穿行/并行\n6．\t擦错检查：错就丢\n7．\t检查链路状态：链路是否政正常工作\n8．\t网络层地址协商：知道通信双方的网络层地址\n9．  数据压缩协商\n","tags":["计算机网络"],"categories":["计算机"]},{"title":"计算机组成原理基础知识","url":"/2018/11/02/寻址方式/","content":"\n1.计算机系统：由硬件和软件两大部分组成，有多种层次结构。 \n2.主机：CPU、存储器和输入输出接口合起来构成计算机的主机。\n3.主存：用于存放正在访问的信息\n4.辅存：用于存放暂时不用的信息。\n5.高速缓存：用于存放正在访问信息的付本。\n    6.中央处理器：是计算机的核心部件，由运算器和控制器构成。\n7.硬件：是指计算机实体部分，它由看得见摸得着的各种电子元器件，各类光、电、机  \n           设备的实物组成。\n    软件：指看不见摸不着，由人们事先编制的具有各类特殊功能的程序组成。\n8.系统软件：又称系统程序，主要用来管理整个计算机系统，监视服务，使系统资源得\n              到合理调度，高效运行。\n应用软件：又称应用程序，它是用户根据任务需要所编制的各种程序。\n9.源程序：通常由用户用各种编程语言编写的程序。\n 目的程序：由计算机将其翻译机器能识别的机器语言程序。\n10.总线：是连接多个部件的信息传输线，是各部件共享的传输介质。\n11.系统总线：是指CPU、主存、I/O设备（通过I/O接口）各大部件之间的信息传输线。\n  通信总线：是指用于计算机系统之间或者计算机系统与其他系统（如控制仪表、移动\n           通信）之间的通信的线路。按传送方式分并行和串行。串行通信是指数据在单条位宽的传输线上，一位一位的按顺序分时传送。并行通信是指数据在多条并行\n位宽的传输线上，同时由源传送到目的地。\n 12.带宽：单位时间内可以传送的最大的信息量。\n 13.机器字长：是指CPU一次并行处理数据的位数，通常与CPU的寄存器位数有关。\n14.主存容量：是指主存中存放二进制代码的总位数。\n15.机器数：符号位数字化，0代表正数，1代表负数。\n16.定点数：小数点固定在某一位位置的数。\n17.浮点数：小数点的位置可以浮动的数。\n18.补码：带符号数据表示方法之一，正数的反码和原码相同，负数的反码是将二进制按位取反后在最低位再加  \n19.溢出：在计算机中，超出机器字长，发生错误的结果。\n20.非编码键盘：采用软件判断键是否按下及设键、译键、计算键值的方法的键盘。\n21.A/D转换器：它能将模拟量转换成数字量，是计算机的输入设备。\n    22.I/O接口：指主机与I/O设备之间设置的一个硬件电路及器相应的软件控制。\n23.端口：指接口电路中的一些寄存器，用来存放数据信息、控制信息和状态信息。\n24.中断：计算机在执行程序的过程中，当出现异常情况或特殊请求时，计算机停止现行程序的运行转向对这些异常情况或特殊请求处理，处理结束后再返回到现行程序的间断处，继续执行源程序。\n25.中断源：凡能向CPU提出中断请求的各种因素统称为中断源。\n26.中断嵌套：计算机在处理中断的过程中，有可能出现新的中断请求，此时CPU暂停现行中断服务程序，转向新的中断请求，这种现象称为中断嵌套。\n27.优先级：为使系统能及时响应并处理发生的所有中断，系统根据引起中断事件的重要性和紧迫程度，硬件将中断源分为若干个级别。\n28.DMA方式：用硬件在主存与外设之间直接进行数据传送，不须CPU，用软件控制。\n     29.指令系统：将全部机器指令的集合称为机器的指令系统。\n30.寻址方式：是指确定本条指令的数据地址以及下一条将要执行的指令地址的方法，它与硬件结构紧密相关，而且直接影响指令格式和指令功能。\n31.指令周期：完成一条指令的时间，由若干机器周期组成。\n 机器周期：完成摸个独立操作，由若干时钟周期组成。\n 时钟周期：最基本时间单位，由主频决定。\n32.微操作：在微程序控制器中，执行部件接受微指令后所进行的最基本的操作。\n33.微指令：控制器存储的控制代码，分为操作控制部分和顺序控制部分，由微命令组成。\n34.微程序：存储在控制存储器中的完成指令功能的程序，由微指令组成。\n 35.控制存储器：CPU内用于存放实现指令系统全部指令的微程序的只读存储器。\n\n\n\n","tags":["计算机组成原理"],"categories":["计算机"]},{"title":"数据结构代码","url":"/2018/11/02/数据结构代码/","content":"## 题目一：字符串统计\n**输入格式：**\n手工输入一个字符串\n**输出格式：**\n输出连续出现次数最多的字母\n\n**输入样例：**\n``abbccc``\n**输出样例：**\n``c``\n\n```\n\n#include <stdio.h>\nint main()\n{\n    char a[100];\n    int b[100];\n    int i = 0, j = 0, temp = 0;\n    char x;\n    printf(\"请输入字符串：\\n\");\n    scanf(\"%s\", &a);\n    b[0] = 1;\n    while (a[i + 1] != '\\0')\n    {\n        if (a[i + 1] == a[i])\n        {\n            b[i + 1] = b[i] + 1;\n        }\n        else\n        {\n            b[i + 1] = 1;\n        }\n        ++i;\n    }\n    printf(\"\\n\\n连续出现次数最多的字母是：\\n\\n\");\n    int k = 0;\n    for (j = 0; j < i + 1; ++j)\n    {\n        if (temp < b[j])\n        {\n            temp = b[j];\n            k = j;\n        }\n    }\n    for (j = 0; j <= i + 1; ++j)\n        if (b[j] == temp)\n            printf(\"%c  \", a[j]);\n\n    return 0;\n}\n```\n\n\n## 字符串\n写一个函数，判断一个字符串是否是对称字符串，比如abcddcba，要求函数返回值是布尔类型。\n\n**输入格式：**\n手工输入一串字符串\n\n**输出格式：**\n输出布尔型数据1或者0\n输入样例：\n`abcba`\n输出样例：\n`1`\n图片\n\n**解决方法：**\n（1）算法的基本思想：\n\n将字符数组首尾比较\n\n（2）代码实现：\n\n```\n#include \n#include \n#include \nusing namespace std;\nmain()\n{\n    char a[100];\n    cin >> a;\n    int len;\n    len = strlen(a);\n    int i = 0;\n    int j = len - 1;\n    while (i < j)\n    {\n        if (a[i] == a[j])\n        {\n            i++;\n            j--;\n        }\n        else\n            break;\n    }\n    bool b = true;\n    bool c = false;\n    if (i < j)\n        cout << c << endl;\n    else\n        cout << b << endl;\n}\n```\n## 输出数字个数\n写一个函数，计算每0-9在这个数中出现了多少次，并按照0-9个数依次输出。\n\n**输入格式：**\n手工输入一组无序数字\n\n**输出格式：**\n依次输出这组数据中0-9的个数\n\n**输入样例：**\n> 1 1 2 3 4 5 6 7 8 9 0\n**输出样例：**\n> 1 2 1 1 1 1 1 1 1 1 1\n\n解决方法：\n（1）代码实现：\n\n```\n#include <stdio.h>\nvoid jishu(int x[], int k)\\\\k是数组中输入的数字的个数\n{\n    int a[10] = {0};\n    int i = 0, j = 0;\n    while (i < k)\n    {\n        j = 0;\n        while (1)\n        {\n            if (x[i] == j)\n            {\n                a[j] = a[j] + 1;\n                break;\n            }\n            else\n            {\n                ++j;\n            }\n        }\n        ++i;\n    }\n    for (i = 0; i < 10; ++i)\n    {\n        printf(\"%d  \", a[i]);\n    }\n    return;\n}\nmain()\n{\n    char s;\n    int a[100], k = 0;\n    printf(\"请输入无序数字（用空格隔开，按回车键结束输入）:\\n\");\n    do\n    {\n        scanf(\"%d\", &a[k++]);\n    } while ((s = getchar()) != '\\n');\n    jishu(a, k);\n}\n```\n## 变量\n写一个函数，计算e，给了e的计算公式，要求精度10-5次幂，e的计算公式：e=1/1!+1/2!+1/3！+ ……\n\n输出格式：\n直接输出e\n输出样例：\n``2.718282\n\n解决方法：\n（1）代码实现：\n```\n\n#include \nint main()\n{\n    int n = 1, k = 1;\n    double a, e = 1;\n     a = 0.00001;\n     do\n     {\n         k *= n;\n         n++;\n         e += 1.0 / k;\n    } while (1.0 / k >= a);\n     printf(\"e=%lf\", e);\n     return 0;\n}\n```\n\n输入一个整数n（0<n<10），显示n行如下规律图形。\n\n例如输入3 ，显示\n          1\n       2 3\n    4 5 6\n例如输入5，显示\n                                        1\n                                2      3\n                        4      5      6\n                 7     8      9     10\n         11  12   13    14     15\n\n图片\n\n解决方法：\n（1）算法的基本思想：\n\n对输入5时输出的图形进行分析：\n\n1. 分析每行空多少个数，第0行空了4个数（不考虑数字之间的空），第1行空了 3个数...第4行空了0个数\n\n          行数   0      1      2     3      4\n\n           空      4      3     2      1      0\n\n          关系 5-0-1  5-1-1  5-2-1 5-3-1  5-4-1\n\n可以发现规律记输入为n，行数i，则第i行需要空n-i-1个数\n\n2.  分析每行输出的数字\n\n1）首先，每行输出的数字个数等于行数+1，如第0行输出1个数字，第1行输出2个数字...，即第i行输出i+1个数字\n\n2）至于数值的控制，由于是值是连续输出的，只需要一个变量来存储当前输出到多少了就行了\n\n通过以上规律的分析之后，确定程序中循环的基本结构\n\n外层循环（控制输出一行）{\n\n    循环1（完成空格部分输出）\n\n            循环2（完成数字部分输出）\n\n}       \n\n（2）代码实现：\n\n```\n#include <iostream>\nusing namespace std;\n\nvoid function(int n);\n\nint main(void)\n{\n    int n;\n    cout << \"please input n:\";\n    cin >> n;\n    function(n);\n    return 0;\n}\n\nvoid function(int n)\n{\n    int i, j, k;\n    int temp = 1; //临时存放当前输出的数值\n    for (i = 0; i < n; i++)\n    { //外层循环，每循环一次输出图形的一行\n        //控制输出空格的循环\n        for (j = 0; j < n - i - 1; j++)\n        {\n            cout << ' ' << '\\t';\n        }\n        //控制输出数字的循环\n        for (j = 0; j < i + 1; j++)\n        {\n            cout << temp << '\\t';\n            temp++;\n        }\n        cout << endl;\n    }\n}\n```\n","tags":["数据结构"],"categories":["计算机"]},{"title":"计算机组成原理基础知识","url":"/2018/11/02/计算机基础知识/","content":"\n\n#### 基础知识\n\n1.计算机系统：由硬件和软件两大部分组成，有多种层次结构。 \n \t\t2.主机：CPU、存储器和输入输出接口合起来构成计算机的主机。\n \t\t3.主存：用于存放正在访问的信息\n \t\t4.辅存：用于存放暂时不用的信息。\n \t\t5.高速缓存：用于存放正在访问信息的付本。\n \t\t\t6.中央处理器：是计算机的核心部件，由运算器和控制器构成。\n \t\t7.硬件：是指计算机实体部分，它由看得见摸得着的各种电子元器件，各类光、电、机  \n \t\t\t\t   设备的实物组成。 \t\t\t软件：指看不见摸不着，由人们事先编制的具有各类特殊功能的程序组成。\n \t\t8.系统软件：又称系统程序，主要用来管理整个计算机系统，监视服务，使系统资源得\n \t\t\t\t\t  到合理调度，高效运行。 \t\t应用软件：又称应用程序，它是用户根据任务需要所编制的各种程序。\n \t\t9.源程序：通常由用户用各种编程语言编写的程序。 \t\t 目的程序：由计算机将其翻译机器能识别的机器语言程序。\n \t\t10.总线：是连接多个部件的信息传输线，是各部件共享的传输介质。\n \t\t11.系统总线：是指CPU、主存、I/O设备（通过I/O接口）各大部件之间的信息传输线。\n \t\t  通信总线：是指用于计算机系统之间或者计算机系统与其他系统（如控制仪表、移动\n \t\t\t\t   通信）之间的通信的线路。按传送方式分并行和串行。串行通信是指数据在单条位宽的传输线上，一位一位的按顺序分时传送。并行通信是指数据在多条并行  \t\t位宽的传输线上，同时由源传送到目的地。\n \t\t 12.带宽：单位时间内可以传送的最大的信息量。\n \t\t 13.机器字长：是指CPU一次并行处理数据的位数，通常与CPU的寄存器位数有关。\n\n#### 其他知识\n\n\t\t\n\n14.主存容量：是指主存中存放二进制代码的总位数。\n \t\t15.机器数：符号位数字化，0代表正数，1代表负数。\n \t\t16.定点数：小数点固定在某一位位置的数。\n \t\t17.浮点数：小数点的位置可以浮动的数。\n \t\t18.补码：带符号数据表示方法之一，正数的反码和原码相同，负数的反码是将二进制按位取反后在最低位再加  \n \t\t19.溢出：在计算机中，超出机器字长，发生错误的结果。\n \t\t20.非编码键盘：采用软件判断键是否按下及设键、译键、计算键值的方法的键盘。\n \t\t21.A/D转换器：它能将模拟量转换成数字量，是计算机的输入设备。\n \t\t\t22.I/O接口：指主机与I/O设备之间设置的一个硬件电路及器相应的软件控制。\n \t\t23.端口：指接口电路中的一些寄存器，用来存放数据信息、控制信息和状态信息。\n\n \n\n24.中断：计算机在执行程序的过程中，当出现异常情况或特殊请求时，计算机停止现行程序的运行转向对这些异常情况或特殊请求处理，处理结束后再返回到现行程序的间断处，继续执行源程序。\n\t\t25.中断源：凡能向CPU提出中断请求的各种因素统称为中断源。\n   \n\n \n   \t\t==\n\n26.中断嵌套：计算机在处理中断的过程中，有可能出现新的中断请求，此时CPU暂停现行中断服务程序，转向新的中断请求，这种现象称为中断嵌套。\n\t\t27.优先级：为使系统能及时响应并处理发生的所有中断，系统根据引起中断事件的重要性和紧迫程度，硬件将中断源分为若干个级别。\n\t\t28.DMA方式：用硬件在主存与外设之间直接进行数据传送，不须CPU，用软件控制。\n\t\t\t 29.指令系统：将全部机器指令的集合称为机器的指令系统。\n\t\t\t 30.寻址方式：是指确定本条指令的数据地址以及下一条将要执行的指令地址的方法，它与硬件结构紧密相关，而且直接影响指令格式和指令功能。\n\t\t\t 31.指令周期：完成一条指令的时间，由若干机器周期组成。 \t\t 机器周期：完成摸个独立操作，由若干时钟周期组成。 \t\t 时钟周期：最基本时间单位，由主频决定。\n\t\t\t 32.微操作：在微程序控制器中，执行部件接受微指令后所进行的最基本的操作。\n\t\t\t 33.微指令：控制器存储的控制代码，分为操作控制部分和顺序控制部分，由微命令组成。\n\t\t\t 34.微程序：存储在控制存储器中的完成指令功能的程序，由微指令组成。\n\t\t\t 35..控制存储器：CPU内用于存放实现指令系统全部指令的微程序的只读存储器。\n\n==\n\n","tags":["计算机组成原理"],"categories":["计算机"]},{"title":"计算机网络的信道划分","url":"/2018/11/02/计算机网络的信道划分/","content":"**信道划分介质访问控制**\n==静态划分信道==\n1频分多路复用\n2时分多路复用\n3波分多路复用\n4码分多路复用\n\n==动态分配信道==\n轮询访问介质访问控制：令牌传递协议\n随机访问介质访问控制：ALOHA协议 CSMA协议 CSMA/CD协议 CSMA/CA协议\n\n","tags":["计算机网络"],"categories":["计算机"]}]