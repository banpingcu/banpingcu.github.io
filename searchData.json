[{"title":"NMP的使用介绍","url":"/2019/06/02/NPM的使用/","content":"NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：\n\n 1. 允许用户从NPM服务器下载别人编写的第三方包到本地使用。\n 2. 允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。\n 3. 允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。\n\n由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 \"npm -v\" 来测试是否成功安装。命令如下，出现版本提示表示安装成功:\n\n``` shell\n$ npm -v\n2.3.0\n```\n如果你安装的是旧版本的 npm，可以很容易得通过 npm 命令来升级，命令如下：\n``` shell\n$ sudo npm install npm -g\n/usr/local/bin/npm -> /usr/local/lib/node_modules/npm/bin/npm-cli.js\nnpm@2.14.2 /usr/local/lib/node_modules/npm\n```\n如果是 Window 系统使用以下命令即可：\n\n``` coffeescript\nnpm install npm -g\n```\n使用淘宝镜像的命令：\n\n``` ebnf\ncnpm install npm -g\n```\n\n使用 npm 命令安装模块\nnpm 安装 Node.js 模块语法格式如下：\n\n``` sql\n$ npm install <Module Name>\n```\n\n以下实例，我们使用 npm 命令安装常用的 Node.js web框架模块 express:\n\n``` shell\n$ npm install express\n```\n\n安装好之后，express 包就放在了工程目录下的 node_modules 目录中，因此在代码中只需要通过 require('express') 的方式就好，无需指定第三方包路径。\n","tags":["Node.js"],"categories":["计算机"]},{"title":"早晨","url":"/2019/05/27/早晨/","content":"海边美丽的早晨！！！！！\n![清晨的阳光](https://images.pexels.com/photos/1631678/pexels-photo-1631678.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500)","tags":["摄影"],"categories":["摄影"]},{"title":"黄昏","url":"/2019/02/22/黄昏/","content":"空中看见日落的场景\n![enter description here](https://images.pexels.com/photos/2253814/pexels-photo-2253814.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940)\n\n","tags":["摄影","阳光"],"categories":["摄影"]},{"title":"闰年","url":"/2019/02/02/闰年/","content":"**输入年、月、日，计算该天是本年的第几天。**\n\n``` javascript\n#include <stdio.h>\n//闰年的条件能被4整除但不能被100整除的年份为普通闰年。；\n//世纪闰年:能被400整除的为世纪闰年。\nint runnian(int a){\n    if (a%4==0&&a%100!=0)\n    return 0;\n    if (a%400==0)\n    return 0;\n    else return 1;\n}\nint main(){\n    int a,b,c,sum=0;\n    while(scanf(\"%d %d %d\",&a,&b,&c)!=EOF){\n    if(runnian(a))\n    {\n        switch(b-1){\n            case 11: sum+=30;\n            case 10: sum+=31;\n            case 9: sum+=30;\n            case 8: sum+=31;\n            case 7: sum+=31;\n            case 6: sum+=30;\n            case 5: sum+=31;\n            case 4: sum+=30;\n            case 3: sum+=31;\n            case 2: sum+=28;\n            case 1: sum+=31;            \n        }           \n    }\n    else{\n         switch(b-1){\n             case 11: sum+=30;\n             case 10: sum+=31;\n             case 9: sum+=30;\n             case 8: sum+=31;\n             case 7: sum+=31;\n             case 6: sum+=30;\n             case 5: sum+=31;\n             case 4: sum+=30;\n             case 3: sum+=31;\n             case 2: sum+=29;\n             case 1: sum+=31;            \n        }           \n    }\n    sum = sum +c;\n    printf(\"%d\",sum);\n    }  \n}\n```\n也可以将每月的日期直接写在数组内然后计算，这样写是为了练习一下switch的用法。\n\nbreak和continue的区别:\n\n``` javascript\n#include <stdio.h>\nint main(){\n    int k=4,n=0;\n    while(k){\n        k--;\n        switch(k){\n           default :break;\n            case 1:n++;\n            case 2:++n;break;\n            case 3:if(n>=0) continue;     \n        }\n        ++n;      \n    }\n    printf(\"%d\\n\",n);\n    return 0;\n}\n```\n答案是6.\nk=4时：不变，不执行循环中continue后面的语句\nk=3时：k=2\nk=2时：k=5\nk=1时：k=6","tags":["C语言"],"categories":["计算机"]},{"title":"文件的使用","url":"/2018/12/05/文件的使用/","content":"**C语言文件的操作**\n\n``` javascript\n\nint main()\n{\n\n\n   FILE *fp = NULL;\n\n   fp = fopen(\"test.txt\", \"w+\");//w+是指既可以写也可以读\n   fprintf(fp, \"This is testing for fprintf...\\n\");//使用fprintf的输入方法\n   fputs(\"This is testing for fputs...\\n\", fp);//使用futs的输入方法\n   fclose(fp);\n\n   char buff[255];\n\n   fp = fopen(\"test.txt\", \"r\");//只读方法打开\n   fscanf(fp, \"%s\", buff);//fscanf直到空格就截止，并存入到buff里面（并不可以直接输出）\n   printf(\"1: %s\\n\", buff );\n\n   fgets(buff, 255, (FILE*)fp);\n   printf(\"2: %s\\n\", buff );//接着上一步的位置读取文件，到换行符 '\\n' 或文件的末尾 EOF介绍\n\n   fgets(buff, 255, (FILE*)fp);\n   printf(\"3: %s\\n\", buff );\n   fclose(fp);\n\n}\n\n```\n\n结果图\n![enter description here](https://wx2.sinaimg.cn/mw690/006cW3dhly1g0y25j25plj30ag0380sl.jpg)\n\nr 打开只读文件，该文件必须存在。\nr+ 打开可读写的文件，该文件必须存在。\nrb+ 读写打开一个二进制文件，只允许读写数据。\nrt+ 读写打开一个文本文件，允许读和写。\nw 打开只写文件，若文件存在则文件长度清为0，即该文件内容会消失。若文件不存在则建立该文件。\nw+ 打开可读写文件，若文件存在则文件长度清为零，即该文件内容会消失。若文件不存在则建立该文件。\na 以附加的方式打开只写文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被加到文件尾，即文件原先的内容会被保留。\na+ 以附加方式打开可读写的文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被加到文件尾后，即文件原先的内容会被保留。\nwb 只写打开或新建一个二进制文件；只允许写数据。\nwb+ 读写打开或建立一个二进制文件，允许读和写。\nwt+ 读写打开或着建立一个文本文件；允许读写。\nat+ 读写打开一个文本文件，允许读或在文本末追加数据。\nab+ 读写打开一个二进制文件，允许读或在文件末追加数据。","tags":["C语言"],"categories":["计算机"]},{"title":"平方数","url":"/2018/12/03/平方数/","content":"\n\n***题目：打印所有不超过n（n<256）的，其平方具有对称性质的数。如11*11=121。***\n\n``` javascript\n#include <stdio.h>\nint main(){\n    int i,n,m;\n    for(i=0;i<256;i++) {\n      n = i * i;  //i平方\n      m = 0;\n\t   //将i*i的积取反，如10*10=100，将100取反是001\n       while(n) {\n        m = m *10 + n%10; \n        n = n/10;\n       }\n       if(m == i*i)  \n        printf(\"%d\\n\",i);\n    }\n  return 0;\n}\n\n```\n解题思路：正反一样就是对称数。","tags":["C语言"],"categories":["计算机"]},{"title":"C语言字符串","url":"/2018/12/02/C语言字符串/","content":"\n题目描述\n给出一个长度不超过1000的字符串，判断它是不是回文(顺读，逆读均相同)的。\n\n``` javascript\n\n#include <stdio.h>\n#include <string.h>//字符串函数库\nint main(){\n    char a[1000];\n\tint flag=0,i,j;\n\twhile(scanf(\"%s\",a)!=EOF)//CTRL+Z\n\t{\n\t    for(i=0,j=strlen(a)-1;i<j;i++,j--)\n\t\t{\n\t\t   if(a[i]!=a[j])\n\t\t   {\n\t\t      flag=1;\n\t\t\t  printf(\"No!\");\n              break;//跳出for循环\n\t\t   }\n\t\t}\n        if(flag==0)\n\t    {\n     \tprintf(\"Yes!\");\n\t    }  \n\t}\n\t return 0;\n}\n\n```","tags":["C语言"],"categories":["计算机"]},{"title":"DRAM","url":"/2018/11/02/DRAM/","content":"**==什么是DRAM？什么是E2PROM？计算机的主存采用哪种存储器==**？\n\n        DRAM 的英文全称是\"Dynamic RAM\"，翻译成中文就是\"动态随机存储器\"。。只能将数据保持很短的时间。为了保持数据，DRAM 必须隔一段时间刷（refresh）一次。如果存储单元没有被刷新，数据就会丢失。DRAM用于通常的数据存取。我们常说内存有多大，主要是指DRAM的容量\n        E2PROM编程原理和EPROM相同，但可用电擦除，重复该写的次数有限制，大约10万次。其读写操作可按每个位或者每个字节进行。\n\n      \n           \n","tags":["计算机组成原理"],"categories":["计算机"]},{"title":"PPP协议","url":"/2018/11/02/PPP协议/","content":"**==PPP协议（只支持全双工链路）==**\n需要满足的要求\n1．\t简单，比IP层简单。无需纠错、序号、流量控制。\n2．\t封装成帧：帧定界符\n3．\t透明传输 异步线路用字节填充，同步线路用比特填充。\n4．\t多种网络层协议：封装IP数据包可以采用多种协议\n5．\t多种类型链路：穿行/并行\n6．\t擦错检查：错就丢\n7．\t检查链路状态：链路是否政正常工作\n8．\t网络层地址协商：知道通信双方的网络层地址\n9．  数据压缩协商\n","tags":["计算机网络"],"categories":["计算机"]},{"title":"计算机组成原理基础知识","url":"/2018/11/02/寻址方式/","content":"\n1.计算机系统：由硬件和软件两大部分组成，有多种层次结构。 \n2.主机：CPU、存储器和输入输出接口合起来构成计算机的主机。\n3.主存：用于存放正在访问的信息\n4.辅存：用于存放暂时不用的信息。\n5.高速缓存：用于存放正在访问信息的付本。\n    6.中央处理器：是计算机的核心部件，由运算器和控制器构成。\n7.硬件：是指计算机实体部分，它由看得见摸得着的各种电子元器件，各类光、电、机  \n           设备的实物组成。\n    软件：指看不见摸不着，由人们事先编制的具有各类特殊功能的程序组成。\n8.系统软件：又称系统程序，主要用来管理整个计算机系统，监视服务，使系统资源得\n              到合理调度，高效运行。\n应用软件：又称应用程序，它是用户根据任务需要所编制的各种程序。\n9.源程序：通常由用户用各种编程语言编写的程序。\n 目的程序：由计算机将其翻译机器能识别的机器语言程序。\n10.总线：是连接多个部件的信息传输线，是各部件共享的传输介质。\n11.系统总线：是指CPU、主存、I/O设备（通过I/O接口）各大部件之间的信息传输线。\n  通信总线：是指用于计算机系统之间或者计算机系统与其他系统（如控制仪表、移动\n           通信）之间的通信的线路。按传送方式分并行和串行。串行通信是指数据在单条位宽的传输线上，一位一位的按顺序分时传送。并行通信是指数据在多条并行\n位宽的传输线上，同时由源传送到目的地。\n 12.带宽：单位时间内可以传送的最大的信息量。\n 13.机器字长：是指CPU一次并行处理数据的位数，通常与CPU的寄存器位数有关。\n14.主存容量：是指主存中存放二进制代码的总位数。\n15.机器数：符号位数字化，0代表正数，1代表负数。\n16.定点数：小数点固定在某一位位置的数。\n17.浮点数：小数点的位置可以浮动的数。\n18.补码：带符号数据表示方法之一，正数的反码和原码相同，负数的反码是将二进制按位取反后在最低位再加  \n19.溢出：在计算机中，超出机器字长，发生错误的结果。\n20.非编码键盘：采用软件判断键是否按下及设键、译键、计算键值的方法的键盘。\n21.A/D转换器：它能将模拟量转换成数字量，是计算机的输入设备。\n    22.I/O接口：指主机与I/O设备之间设置的一个硬件电路及器相应的软件控制。\n23.端口：指接口电路中的一些寄存器，用来存放数据信息、控制信息和状态信息。\n24.中断：计算机在执行程序的过程中，当出现异常情况或特殊请求时，计算机停止现行程序的运行转向对这些异常情况或特殊请求处理，处理结束后再返回到现行程序的间断处，继续执行源程序。\n25.中断源：凡能向CPU提出中断请求的各种因素统称为中断源。\n26.中断嵌套：计算机在处理中断的过程中，有可能出现新的中断请求，此时CPU暂停现行中断服务程序，转向新的中断请求，这种现象称为中断嵌套。\n27.优先级：为使系统能及时响应并处理发生的所有中断，系统根据引起中断事件的重要性和紧迫程度，硬件将中断源分为若干个级别。\n28.DMA方式：用硬件在主存与外设之间直接进行数据传送，不须CPU，用软件控制。\n     29.指令系统：将全部机器指令的集合称为机器的指令系统。\n30.寻址方式：是指确定本条指令的数据地址以及下一条将要执行的指令地址的方法，它与硬件结构紧密相关，而且直接影响指令格式和指令功能。\n31.指令周期：完成一条指令的时间，由若干机器周期组成。\n 机器周期：完成摸个独立操作，由若干时钟周期组成。\n 时钟周期：最基本时间单位，由主频决定。\n32.微操作：在微程序控制器中，执行部件接受微指令后所进行的最基本的操作。\n33.微指令：控制器存储的控制代码，分为操作控制部分和顺序控制部分，由微命令组成。\n34.微程序：存储在控制存储器中的完成指令功能的程序，由微指令组成。\n 35.控制存储器：CPU内用于存放实现指令系统全部指令的微程序的只读存储器。\n\n\n\n","tags":["计算机组成原理"],"categories":["计算机"]},{"title":"计算机组成原理基础知识","url":"/2018/11/02/计算机基础知识/","content":"\n\n#### 基础知识\n\n1.计算机系统：由硬件和软件两大部分组成，有多种层次结构。 \n \t\t2.主机：CPU、存储器和输入输出接口合起来构成计算机的主机。\n \t\t3.主存：用于存放正在访问的信息\n \t\t4.辅存：用于存放暂时不用的信息。\n \t\t5.高速缓存：用于存放正在访问信息的付本。\n \t\t\t6.中央处理器：是计算机的核心部件，由运算器和控制器构成。\n \t\t7.硬件：是指计算机实体部分，它由看得见摸得着的各种电子元器件，各类光、电、机  \n \t\t\t\t   设备的实物组成。 \t\t\t软件：指看不见摸不着，由人们事先编制的具有各类特殊功能的程序组成。\n \t\t8.系统软件：又称系统程序，主要用来管理整个计算机系统，监视服务，使系统资源得\n \t\t\t\t\t  到合理调度，高效运行。 \t\t应用软件：又称应用程序，它是用户根据任务需要所编制的各种程序。\n \t\t9.源程序：通常由用户用各种编程语言编写的程序。 \t\t 目的程序：由计算机将其翻译机器能识别的机器语言程序。\n \t\t10.总线：是连接多个部件的信息传输线，是各部件共享的传输介质。\n \t\t11.系统总线：是指CPU、主存、I/O设备（通过I/O接口）各大部件之间的信息传输线。\n \t\t  通信总线：是指用于计算机系统之间或者计算机系统与其他系统（如控制仪表、移动\n \t\t\t\t   通信）之间的通信的线路。按传送方式分并行和串行。串行通信是指数据在单条位宽的传输线上，一位一位的按顺序分时传送。并行通信是指数据在多条并行  \t\t位宽的传输线上，同时由源传送到目的地。\n \t\t 12.带宽：单位时间内可以传送的最大的信息量。\n \t\t 13.机器字长：是指CPU一次并行处理数据的位数，通常与CPU的寄存器位数有关。\n\n#### 其他知识\n\n\t\t\n\n14.主存容量：是指主存中存放二进制代码的总位数。\n \t\t15.机器数：符号位数字化，0代表正数，1代表负数。\n \t\t16.定点数：小数点固定在某一位位置的数。\n \t\t17.浮点数：小数点的位置可以浮动的数。\n \t\t18.补码：带符号数据表示方法之一，正数的反码和原码相同，负数的反码是将二进制按位取反后在最低位再加  \n \t\t19.溢出：在计算机中，超出机器字长，发生错误的结果。\n \t\t20.非编码键盘：采用软件判断键是否按下及设键、译键、计算键值的方法的键盘。\n \t\t21.A/D转换器：它能将模拟量转换成数字量，是计算机的输入设备。\n \t\t\t22.I/O接口：指主机与I/O设备之间设置的一个硬件电路及器相应的软件控制。\n \t\t23.端口：指接口电路中的一些寄存器，用来存放数据信息、控制信息和状态信息。\n\n \n\n24.中断：计算机在执行程序的过程中，当出现异常情况或特殊请求时，计算机停止现行程序的运行转向对这些异常情况或特殊请求处理，处理结束后再返回到现行程序的间断处，继续执行源程序。\n\t\t25.中断源：凡能向CPU提出中断请求的各种因素统称为中断源。\n   \n\n \n   \t\t==\n\n26.中断嵌套：计算机在处理中断的过程中，有可能出现新的中断请求，此时CPU暂停现行中断服务程序，转向新的中断请求，这种现象称为中断嵌套。\n\t\t27.优先级：为使系统能及时响应并处理发生的所有中断，系统根据引起中断事件的重要性和紧迫程度，硬件将中断源分为若干个级别。\n\t\t28.DMA方式：用硬件在主存与外设之间直接进行数据传送，不须CPU，用软件控制。\n\t\t\t 29.指令系统：将全部机器指令的集合称为机器的指令系统。\n\t\t\t 30.寻址方式：是指确定本条指令的数据地址以及下一条将要执行的指令地址的方法，它与硬件结构紧密相关，而且直接影响指令格式和指令功能。\n\t\t\t 31.指令周期：完成一条指令的时间，由若干机器周期组成。 \t\t 机器周期：完成摸个独立操作，由若干时钟周期组成。 \t\t 时钟周期：最基本时间单位，由主频决定。\n\t\t\t 32.微操作：在微程序控制器中，执行部件接受微指令后所进行的最基本的操作。\n\t\t\t 33.微指令：控制器存储的控制代码，分为操作控制部分和顺序控制部分，由微命令组成。\n\t\t\t 34.微程序：存储在控制存储器中的完成指令功能的程序，由微指令组成。\n\t\t\t 35..控制存储器：CPU内用于存放实现指令系统全部指令的微程序的只读存储器。\n\n==\n\n","tags":["计算机组成原理"],"categories":["计算机"]},{"title":"计算机网络的信道划分","url":"/2018/11/02/计算机网络的信道划分/","content":"**信道划分介质访问控制**\n==静态划分信道==\n1频分多路复用\n2时分多路复用\n3波分多路复用\n4码分多路复用\n\n==动态分配信道==\n轮询访问介质访问控制：令牌传递协议\n随机访问介质访问控制：ALOHA协议 CSMA协议 CSMA/CD协议 CSMA/CA协议\n\n","tags":["计算机网络"],"categories":["计算机"]}]